const int DOT_BUTTON_PIN = 40; // Button for dot input
const int DASH_BUTTON_PIN = 42; // Button for dash input
const int RELAY_PIN = 44;
const int SPEAKER_PIN = 34; // Connect your speaker to this pin

const int PRESS = HIGH;
const int NOPRESS = LOW;

const int PASSWORD_LENGTH = 2;
const int PASSWORD[PASSWORD_LENGTH] = {1, 3}; // Morse code for "A" (dot followed by dash)

bool isOpen = false;
unsigned int storageIndex = 0;
int storage[PASSWORD_LENGTH];

void setup() {
  Serial.begin(9600);
  pinMode(DOT_BUTTON_PIN, INPUT);
  pinMode(DASH_BUTTON_PIN, INPUT);
  pinMode(RELAY_PIN, OUTPUT);
}

void loop() {
  unsigned int dotCount = 0;
  unsigned int dashCount = 0;

  // Detect dot input
  if (digitalRead(DOT_BUTTON_PIN) == PRESS) {
    tone(SPEAKER_PIN, 1000, 100); // Generate a short beep
    delay(200); // Wait for debounce
    while (digitalRead(DOT_BUTTON_PIN) == PRESS) {
      dotCount += 1;
      delay(5);
    }
    if (dotCount > 0) {
      storage[storageIndex] = dotCount;
      Serial.print("Dot count: ");
      Serial.println(dotCount);
      storageIndex++;
    }
  }

  // Detect dash input
  if (digitalRead(DASH_BUTTON_PIN) == PRESS) {
    tone(SPEAKER_PIN, 1000, 100); // Generate a short beep
    delay(200); // Wait for debounce
    while (digitalRead(DASH_BUTTON_PIN) == PRESS) {
      dashCount += 1;
      delay(5);
    }
    if (dashCount > 0) {
      storage[storageIndex] = dashCount * 3; // Multiply dash count by 3 to differentiate from dots
      Serial.print("Dash count: ");
      Serial.println(dashCount);
      storageIndex++;
    }
  }

  // Check if the password is complete
  if (storageIndex == PASSWORD_LENGTH) {
    if (checkPassword()) {
      isOpen = true;
      digitalWrite(RELAY_PIN, HIGH); // Activate the relay to unlock the solenoid
      tone(SPEAKER_PIN, 1000, 1000); // Generate a 1 kHz tone for 1 second
      Serial.println("Open!");
      delay(5000); // Lock the box after 5 seconds
      digitalWrite(RELAY_PIN, LOW); // Deactivate the relay to lock the box
      isOpen = false; // Update lock status
    }
    storageIndex = 0; // Reset storage index
  }

  // Your existing code for handling noPressCount and other functionalities goes here...
}

bool checkPassword() {
  for (int i = 0; i < PASSWORD_LENGTH; i++) {
    if (storage[i] != PASSWORD[i]) {
      return false; // Password mismatch
    }
  }
  return true; // Password match
}
